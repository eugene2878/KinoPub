//
//  ItemViewController.swift
//  KinoPub
//
//  Created by Maksim Kolesnik on 07/03/2020.
//  Copyright (c) 2020 Maksim Kolesnik. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import DTModelStorage
import DTTableViewManager

public final class ItemViewController: UIViewController, TransitionView {

    // MARK: - Private

    fileprivate lazy var _tableView: UITableView = {
        let tableView = UITableView(frame: .zero, style: .grouped)
        tableView.delegate = self
        return tableView
    }()

    public let presenter: ItemViewOutput
    public init(presenter: ItemViewOutput) {
        self.presenter = presenter
        super.init(nibName: nil, bundle: nil)
    }

    public required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") }

    // MARK: - Lifecycle

    public override func viewDidLoad() {
        super.viewDidLoad()
        presenter.didTriggerViewReadyEvent()
    }

    private func setupContent() {
        view.addSubview(tableView)
    }

    private func setupLayout() {
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        tableView.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
    }
}

// MARK: - ItemViewInput

extension ItemViewController: ItemViewInput {

}

// MARK: - ItemPresenterOutput

extension ItemViewController: ItemPresenterOutput {
    public func setupInitialState() {
        setupContent()
        setupLayout()

        presenter.requestItem()
            .compactMap({ $0.seasons })
            .subscribe(manager.memoryStorage.recive())

        manager.register(TableViewCell.self)
        manager.register(SeasonTableViewCell.self)
        manager.didSelect(TableViewCell.self, {  (_, _, _) in
            //            self?.presenter.didSelect(model: model)
        })

        manager.didSelect(SeasonTableViewCell.self, { [weak self] (_, model, _) in
            //            self?.presenter.didSelect(model: model)
            self?.presenter.didSelect(model: model)
        })
    }

}

extension ItemViewController: UITableViewDelegate {

    public func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 35
    }

    public func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
    }
}

extension ItemViewController: DTTableViewManageable {
    public var tableView: UITableView! {
        return _tableView
    }
}

extension ItemViewController {
    public final class TableViewCell: UITableViewCell, ModelTransfer {
        public override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {
            super.init(style: UITableViewCell.CellStyle.value1, reuseIdentifier: reuseIdentifier)
            self.accessoryType = .disclosureIndicator
        }

        public required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") }

        public func update(with model: Item) {
            self.textLabel?.text = model.title
        }
    }

    public final class SeasonTableViewCell: UITableViewCell, ModelTransfer {
        public override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {
            super.init(style: UITableViewCell.CellStyle.value1, reuseIdentifier: reuseIdentifier)
            self.accessoryType = .disclosureIndicator
        }

        public required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") }

        public func update(with model: Season) {
            self.textLabel?.text = "Сезон: \(model.number)"
            self.detailTextLabel?.text = "\(model.episodes.count)"
        }
    }
}
