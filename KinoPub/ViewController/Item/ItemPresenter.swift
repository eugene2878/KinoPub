//
//  ItemPresenter.swift
//  KinoPub
//
//  Created by Maksim Kolesnik on 07/03/2020.
//  Copyright (c) 2020 Maksim Kolesnik. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import Combine

public final class ItemPresenter {

    // MARK: - Private

    internal weak var view: ItemPresenterOutput?
    private let interactor: ItemInteractorInput
    private let router: ItemRouterInput

    private var item: Bookmark.Item?
    // MARK: - Initialization

    public init(interactor: ItemInteractorInput,
                router: ItemRouterInput) {
        self.interactor = interactor
        self.router = router
    }

}

// MARK: - ItemViewOutput

extension ItemPresenter: ItemViewOutput {
    public func didSelect(model: Season) {
        router.didSelect(model: model)
    }

    public func didTriggerViewReadyEvent() {
        view?.setupInitialState()
    }

    public func requestItem() -> AnyPublisher<Item, Never> {
        guard let model = item else { return Empty().eraseToAnyPublisher() }
        return interactor.requestBookmark(model: model)
    }
}

// MARK: - ItemInteractorOutput

extension ItemPresenter: ItemInteractorOutput {

}

// MARK: - ItemRouterOutput

extension ItemPresenter: ItemRouterOutput {

}

// MARK: - ItemPresenterInput

extension ItemPresenter: ItemPresenterInput {
    public func setupWith(_ model: Bookmark.Item) {
        self.item = model
    }

}
