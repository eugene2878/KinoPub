//
//  SeasonPresenter.swift
//  KinoPub
//
//  Created by Maksim Kolesnik on 07/03/2020.
//  Copyright (c) 2020 Maksim Kolesnik. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import Combine

public final class SeasonPresenter {

    // MARK: - Private

    internal weak var view: SeasonPresenterOutput?
    private let interactor: SeasonInteractorInput
    private let router: SeasonRouterInput

    private var season: Season?
    // MARK: - Initialization

    public init(interactor: SeasonInteractorInput,
                router: SeasonRouterInput) {
        self.interactor = interactor
        self.router = router
    }

}

// MARK: - SeasonViewOutput

extension SeasonPresenter: SeasonViewOutput {

    public func didTriggerViewReadyEvent() {
        view?.setupInitialState()
    }

    public func requestEpisodes() -> AnyPublisher<[EpisodeViewModel], Never> {
        guard let model = season else { return Empty().eraseToAnyPublisher() }
        return self.interactor.requestEpisodes(model)
    }
}

// MARK: - SeasonInteractorOutput

extension SeasonPresenter: SeasonInteractorOutput {

}

// MARK: - SeasonRouterOutput

extension SeasonPresenter: SeasonRouterOutput {

}

// MARK: - SeasonPresenterInput

extension SeasonPresenter: SeasonPresenterInput {
    public func setupWith(_ model: Season) {
        season = model
    }
}
