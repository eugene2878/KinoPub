//
//  BookmarkInteractor.swift
//  KinoPub
//
//  Created by Maksim Kolesnik on 07/03/2020.
//  Copyright (c) 2020 Maksim Kolesnik. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Combine

public enum BookmarkInteractorError: Error {
    case reachedLimitPages
}

public final class BookmarkInteractor {
    public weak var output: BookmarkInteractorOutput?

    private var totalPages: Int?
    private var items: [Bookmark.Item] = .init()
    private let networkService: NetworkServiceFactory
    public init(networkService: NetworkServiceFactory) {
        self.networkService = networkService
    }
}

// MARK: - BookmarkInteractorInput

extension BookmarkInteractor: BookmarkInteractorInput {
    public func prepareToReloadData() {
        items = .init()
    }
    
    public func requestBookmark(id: Int, page: Int) -> AnyPublisher<[Bookmark.Item], Error> {
        if let totalPages = totalPages {
            guard page <= totalPages else { return Fail(error: BookmarkInteractorError.reachedLimitPages).eraseToAnyPublisher() }
        }
        return networkService.lazyNetworkService
            .execute(BookmarkRequest(id: id, page: page))
            .handleEvents(receiveOutput: { [weak self] (response) in
                guard let self = self else { return }
                self.totalPages = response.pagination.total
            })
            .catch({ _ in Empty() })
            .map({ $0.items })
            .map({ [weak self] (new) -> [Bookmark.Item] in
                guard let self = self else { return [] }
                self.items.append(contentsOf: new)
                return Array(self.items)
            })
            .eraseToAnyPublisher()
    }

    public func interact() {

    }
}
