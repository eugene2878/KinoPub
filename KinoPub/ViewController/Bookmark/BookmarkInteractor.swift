//
//  BookmarkInteractor.swift
//  KinoPub
//
//  Created by Maksim Kolesnik on 07/03/2020.
//  Copyright (c) 2020 Maksim Kolesnik. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Combine

public final class BookmarkInteractor {
    public weak var output: BookmarkInteractorOutput?

    private let networkService: NetworkServiceFactory
    public init(networkService: NetworkServiceFactory) {
        self.networkService = networkService
    }
}

// MARK: - BookmarkInteractorInput

extension BookmarkInteractor: BookmarkInteractorInput {
    public func requestBookmark(model: Bookmark) -> AnyPublisher<[Bookmark.Item], Never> {
        return networkService.lazyNetworkService
            .execute(BookmarkRequest(id: model.id))
            .map({ $0.items })
            .catch({ (_) -> Empty<[Bookmark.Item], Never> in
                return Empty()
            })
            .eraseToAnyPublisher()
    }

    public func interact() {

    }

}
